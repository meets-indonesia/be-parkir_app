version: "3.8"

services:
  app:
    build: .
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=parking_user
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=parking_app
      - DB_SSLMODE=require
      - REDIS_HOST=redis
      - REDIS_PORT=6378
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_EXPIRY=15m
      - JWT_REFRESH_EXPIRY=7d
      - SERVER_PORT=8080
      - SERVER_ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    networks:
      - parking-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=parking_app
      - POSTGRES_USER=parking_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U parking_user -d parking_app"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - parking-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "--no-auth-warning",
          "-a",
          "${REDIS_PASSWORD}",
          "ping",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - parking-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  postgres_data:
  redis_data:

networks:
  parking-network:
    driver: bridge
